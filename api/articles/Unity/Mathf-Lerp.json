{"title":"Mathf.Lerp 使用","slug":"Unity/Mathf-Lerp","date":"2022-08-06T07:05:15.000Z","updated":"2023-11-29T02:42:01.747Z","comments":true,"path":"api/articles/Unity/Mathf-Lerp.json","realPath":null,"excerpt":null,"covers":null,"cover":"/images/background/Mathf-Lerp.jpg","content":"<h3 id=\"参数解析\"><a href=\"#参数解析\" class=\"headerlink\" title=\"参数解析\"></a>参数解析</h3><figure class=\"highlight c#\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\">Mathf.Lerp(<span class=\"hljs-built_in\">float</span> a, <span class=\"hljs-built_in\">float</span> b, <span class=\"hljs-built_in\">float</span> t)<br></code></pre></td></tr></tbody></table></figure>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"right\">解析</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">a</td>\n<td align=\"right\">开始值</td>\n</tr>\n<tr>\n<td align=\"left\">b</td>\n<td align=\"right\">结束值</td>\n</tr>\n<tr>\n<td align=\"left\">t</td>\n<td align=\"right\">插值值</td>\n</tr>\n</tbody></table>\n<p>返回一个 float ，开始值和结束值之间根据浮点数插值的结果。</p>\n<p>通过 t 线性插值在A和B之间。</p>\n<p>参数 t 夹紧到[0，1]范围内。</p>\n<ul>\n<li>当t = 0返回a时</li>\n<li>当t = 1返回b</li>\n<li>当t = 0.5返回a和b的中点。</li>\n</ul>\n<h3 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h3><figure class=\"highlight c#\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> LerpContinuedTime =  <span class=\"hljs-number\">3.0F</span>;     <span class=\"hljs-comment\">// 需要插值的持续时间</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> LerpTime;  <span class=\"hljs-comment\">// 当前插值的时间</span><br><span class=\"hljs-keyword\">public</span> AnimationCurve Curve;    <span class=\"hljs-comment\">//可以配置的运动曲线</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> CurValue;  <span class=\"hljs-comment\">//记录当前的值</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Update</span>()</span><br>{<br>    <span class=\"hljs-keyword\">if</span>(LerpTime &lt; LerpContinuedTime)<br>    {<br>        LerpTime += Time.deltaTime;<br>        <br>        <span class=\"hljs-comment\">// 匀速从 0 插值到 100 </span><br>        Mathf.Lerp(<span class=\"hljs-number\">0f</span>, <span class=\"hljs-number\">100f</span>, LerpTime/LerpContinuedTime);<br>        <br>        <span class=\"hljs-comment\">// 递减插值，开始的值一直改变，当插值百分比固定的时候，计算出来的值每次比上一次计算的小</span><br>        CurValue = Mathf.Lerp(CurValue, <span class=\"hljs-number\">100f</span>, <span class=\"hljs-number\">0.1f</span>);<br>        <br>        <span class=\"hljs-comment\">// 根据运动曲线插值，可以实现减速、加速、值先增加再减小等效果</span><br>        Mathf.Lerp(<span class=\"hljs-number\">0f</span>, <span class=\"hljs-number\">100f</span>, LerpTime/LerpContinuedTime, Curve.Evaluate(LerpTime / LerpContinuedTime));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>\n","more":"<h3 id=\"参数解析\"><a href=\"#参数解析\" class=\"headerlink\" title=\"参数解析\"></a>参数解析</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\">Mathf.Lerp(<span class=\"hljs-built_in\">float</span> a, <span class=\"hljs-built_in\">float</span> b, <span class=\"hljs-built_in\">float</span> t)<br></code></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"right\">解析</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">a</td>\n<td align=\"right\">开始值</td>\n</tr>\n<tr>\n<td align=\"left\">b</td>\n<td align=\"right\">结束值</td>\n</tr>\n<tr>\n<td align=\"left\">t</td>\n<td align=\"right\">插值值</td>\n</tr>\n</tbody></table>\n<p>返回一个 float ，开始值和结束值之间根据浮点数插值的结果。</p>\n<p>通过 t 线性插值在A和B之间。</p>\n<p>参数 t 夹紧到[0，1]范围内。</p>\n<ul>\n<li>当t &#x3D; 0返回a时</li>\n<li>当t &#x3D; 1返回b</li>\n<li>当t &#x3D; 0.5返回a和b的中点。</li>\n</ul>\n<h3 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> LerpContinuedTime =  <span class=\"hljs-number\">3.0F</span>;     <span class=\"hljs-comment\">// 需要插值的持续时间</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> LerpTime;  <span class=\"hljs-comment\">// 当前插值的时间</span><br><span class=\"hljs-keyword\">public</span> AnimationCurve Curve;    <span class=\"hljs-comment\">//可以配置的运动曲线</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> CurValue;  <span class=\"hljs-comment\">//记录当前的值</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Update</span>()</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(LerpTime &lt; LerpContinuedTime)<br>    &#123;<br>        LerpTime += Time.deltaTime;<br>        <br>        <span class=\"hljs-comment\">// 匀速从 0 插值到 100 </span><br>        Mathf.Lerp(<span class=\"hljs-number\">0f</span>, <span class=\"hljs-number\">100f</span>, LerpTime/LerpContinuedTime);<br>        <br>        <span class=\"hljs-comment\">// 递减插值，开始的值一直改变，当插值百分比固定的时候，计算出来的值每次比上一次计算的小</span><br>        CurValue = Mathf.Lerp(CurValue, <span class=\"hljs-number\">100f</span>, <span class=\"hljs-number\">0.1f</span>);<br>        <br>        <span class=\"hljs-comment\">// 根据运动曲线插值，可以实现减速、加速、值先增加再减小等效果</span><br>        Mathf.Lerp(<span class=\"hljs-number\">0f</span>, <span class=\"hljs-number\">100f</span>, LerpTime/LerpContinuedTime, Curve.Evaluate(LerpTime / LerpContinuedTime));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","categories":[{"name":"unity","path":"api/categories/unity.json"},{"name":"unity api","path":"api/categories/unity api.json"}],"tags":[{"name":"unity","path":"api/tags/unity.json"},{"name":"unity api","path":"api/tags/unity api.json"}]}