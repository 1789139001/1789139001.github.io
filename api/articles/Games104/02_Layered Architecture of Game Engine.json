{"title":"现代游戏引擎 - 引擎架构分层（二）","slug":"Games104/02_Layered Architecture of Game Engine","date":"2022-08-30T13:51:02.000Z","updated":"2023-11-29T02:42:01.735Z","comments":true,"path":"api/articles/Games104/02_Layered Architecture of Game Engine.json","realPath":null,"excerpt":null,"covers":["/images/article/Games104/02/Games104_02_01.png","/images/article/Games104/02/Games104_02_02.png","/images/article/Games104/02/Games104_02_03.png","/images/article/Games104/02/Games104_02_08.png","/images/article/Games104/02/Games104_02_04.png","/images/article/Games104/02/Games104_02_05.png","/images/article/Games104/02/Games104_02_06.png","/images/article/Games104/02/Games104_02_07.png"],"cover":"/images/background/Engine-Hierarchy.jpg","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li>资源层：负责加载管理资源</li>\n<li>功能层：就是让画面可见，可动，可交互</li>\n<li>核心层：提供各种核心服务，比如动画、物理、渲染、脚本、相机</li>\n<li>工具层：编辑器，最上层</li>\n<li>平台层：硬件输入适配</li>\n<li>三方插件：SDK集成、或者工具独立出来</li>\n</ul>\n<h2 id=\"资源层\"><a href=\"#资源层\" class=\"headerlink\" title=\"资源层\"></a>资源层</h2><ul>\n<li>核心功能：管理资产的生命周期</li>\n<li>资源导入引擎：要从资源繁杂的数据中，拿取引擎需要的信息，转变成引擎的资产</li>\n<li>资源管理器：一个虚拟文件系统，通过路径引用来加载和卸载资源</li>\n</ul>\n<p><img src=\"/images/article/Games104/02/Games104_02_01.png\"><span class=\"image-caption\">资源生命周期</span></p>\n<h2 id=\"功能层\"><a href=\"#功能层\" class=\"headerlink\" title=\"功能层\"></a>功能层</h2><p>功能层的两大神兽：tick逻辑和tick渲染<br><img src=\"/images/article/Games104/02/Games104_02_02.png\"><span class=\"image-caption\">Tick</span></p>\n<ol>\n<li>入门版多线程<ul>\n<li>逻辑线程</li>\n<li>渲染线程</li>\n<li>模拟线程</li>\n</ul>\n</li>\n<li>主流商业引擎多线程<ul>\n<li>在入门版基础上，把物理、渲染等可以多线程计算的放到多线程进行处理</li>\n</ul>\n</li>\n<li>前沿技术<ul>\n<li>JobSystem：所有都是一个原子，把线程吃满</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/article/Games104/02/Games104_02_03.png\"><span class=\"image-caption\">多线程</span></p>\n<h2 id=\"核心层\"><a href=\"#核心层\" class=\"headerlink\" title=\"核心层\"></a>核心层</h2><ul>\n<li>数学库：矩阵，大学学的线性代数就够用了、物理用的数学比较难</li>\n<li>数学计算效率：不追求完全精准，极限接近就可以，追求效率高</li>\n<li>数据结构和容器：<ul>\n<li>矢量、地图、树木等</li>\n<li>使用高效的STL库</li>\n<li>避免片段内存</li>\n</ul>\n</li>\n<li>内存管理：<ul>\n<li>内存池，分配</li>\n<li>缓存命中率高</li>\n<li>内存排列</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/article/Games104/02/Games104_02_08.png\"><span class=\"image-caption\">内存管理</span></p>\n<p>内存分配金科玉律：</p>\n<ol>\n<li>把数据放在一起</li>\n<li>访问数据的时候最好顺序排列</li>\n<li>删除的时候最好一批次的删除</li>\n</ol>\n<p><img src=\"/images/article/Games104/02/Games104_02_04.png\"><span class=\"image-caption\">核心层基础</span></p>\n<h2 id=\"平台层\"><a href=\"#平台层\" class=\"headerlink\" title=\"平台层\"></a>平台层</h2><ul>\n<li>硬件输入适配：键盘、鼠标、手柄、VR等</li>\n<li>渲染输出适配：不同显卡图形API适配，比如 DirectX 和 OpenGL</li>\n<li>文件路径适配：ios和windows 文件路径</li>\n<li>架构：Arm64、Arm32</li>\n</ul>\n<p><img src=\"/images/article/Games104/02/Games104_02_05.png\"><span class=\"image-caption\">平台层</span></p>\n<h2 id=\"工具层\"><a href=\"#工具层\" class=\"headerlink\" title=\"工具层\"></a>工具层</h2><p>DCC（Digital Content Creation）：导出和导入</p>\n<p><img src=\"/images/article/Games104/02/Games104_02_06.png\"><span class=\"image-caption\">DCC</span></p>\n<ul>\n<li>解耦和降低复杂性<ul>\n<li>下层独立于上层</li>\n<li>上层不知道底层是如何实现的</li>\n</ul>\n</li>\n<li>对不断发展的需求的响应<ul>\n<li>上层演化迅速，但下层演化稳定</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/article/Games104/02/Games104_02_07.png\"><span class=\"image-caption\">架构分层</span></p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p><a href=\"https://zhuanlan.zhihu.com/p/499674385\">参考文章</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV12Z4y1B7th/?spm_id_from=333.788&amp;vd_source=422a2ce23eb94fdbdfc2824aa2898ea5\">课程视频</a></p>\n<p><a href=\"https://cdn.boomingtech.com/games104_static/upload/GAMES104_lecture02Layered%20Architecture%20of%20Game%20Engine.pdf\">课件PPT</a></p>\n","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li>资源层：负责加载管理资源</li>\n<li>功能层：就是让画面可见，可动，可交互</li>\n<li>核心层：提供各种核心服务，比如动画、物理、渲染、脚本、相机</li>\n<li>工具层：编辑器，最上层</li>\n<li>平台层：硬件输入适配</li>\n<li>三方插件：SDK集成、或者工具独立出来</li>\n</ul>\n<h2 id=\"资源层\"><a href=\"#资源层\" class=\"headerlink\" title=\"资源层\"></a>资源层</h2><ul>\n<li>核心功能：管理资产的生命周期</li>\n<li>资源导入引擎：要从资源繁杂的数据中，拿取引擎需要的信息，转变成引擎的资产</li>\n<li>资源管理器：一个虚拟文件系统，通过路径引用来加载和卸载资源</li>\n</ul>\n<p><img  src=\"/images/article/Games104/02/Games104_02_01.png\"  ><span class=\"image-caption\">资源生命周期</span></p>\n<h2 id=\"功能层\"><a href=\"#功能层\" class=\"headerlink\" title=\"功能层\"></a>功能层</h2><p>功能层的两大神兽：tick逻辑和tick渲染<br><img  src=\"/images/article/Games104/02/Games104_02_02.png\"  ><span class=\"image-caption\">Tick</span></p>\n<ol>\n<li>入门版多线程<ul>\n<li>逻辑线程</li>\n<li>渲染线程</li>\n<li>模拟线程</li>\n</ul>\n</li>\n<li>主流商业引擎多线程<ul>\n<li>在入门版基础上，把物理、渲染等可以多线程计算的放到多线程进行处理</li>\n</ul>\n</li>\n<li>前沿技术<ul>\n<li>JobSystem：所有都是一个原子，把线程吃满</li>\n</ul>\n</li>\n</ol>\n<p><img  src=\"/images/article/Games104/02/Games104_02_03.png\"  ><span class=\"image-caption\">多线程</span></p>\n<h2 id=\"核心层\"><a href=\"#核心层\" class=\"headerlink\" title=\"核心层\"></a>核心层</h2><ul>\n<li>数学库：矩阵，大学学的线性代数就够用了、物理用的数学比较难</li>\n<li>数学计算效率：不追求完全精准，极限接近就可以，追求效率高</li>\n<li>数据结构和容器：<ul>\n<li>矢量、地图、树木等</li>\n<li>使用高效的STL库</li>\n<li>避免片段内存</li>\n</ul>\n</li>\n<li>内存管理：<ul>\n<li>内存池，分配</li>\n<li>缓存命中率高</li>\n<li>内存排列</li>\n</ul>\n</li>\n</ul>\n<p><img  src=\"/images/article/Games104/02/Games104_02_08.png\"  ><span class=\"image-caption\">内存管理</span></p>\n<p>内存分配金科玉律：</p>\n<ol>\n<li>把数据放在一起</li>\n<li>访问数据的时候最好顺序排列</li>\n<li>删除的时候最好一批次的删除</li>\n</ol>\n<p><img  src=\"/images/article/Games104/02/Games104_02_04.png\"  ><span class=\"image-caption\">核心层基础</span></p>\n<h2 id=\"平台层\"><a href=\"#平台层\" class=\"headerlink\" title=\"平台层\"></a>平台层</h2><ul>\n<li>硬件输入适配：键盘、鼠标、手柄、VR等</li>\n<li>渲染输出适配：不同显卡图形API适配，比如 DirectX 和 OpenGL</li>\n<li>文件路径适配：ios和windows 文件路径</li>\n<li>架构：Arm64、Arm32</li>\n</ul>\n<p><img  src=\"/images/article/Games104/02/Games104_02_05.png\"  ><span class=\"image-caption\">平台层</span></p>\n<h2 id=\"工具层\"><a href=\"#工具层\" class=\"headerlink\" title=\"工具层\"></a>工具层</h2><p>DCC（Digital Content Creation）：导出和导入</p>\n<p><img  src=\"/images/article/Games104/02/Games104_02_06.png\"  ><span class=\"image-caption\">DCC</span></p>\n<ul>\n<li>解耦和降低复杂性<ul>\n<li>下层独立于上层</li>\n<li>上层不知道底层是如何实现的</li>\n</ul>\n</li>\n<li>对不断发展的需求的响应<ul>\n<li>上层演化迅速，但下层演化稳定</li>\n</ul>\n</li>\n</ul>\n<p><img  src=\"/images/article/Games104/02/Games104_02_07.png\"  ><span class=\"image-caption\">架构分层</span></p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p><a href=\"https://zhuanlan.zhihu.com/p/499674385\">参考文章</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV12Z4y1B7th/?spm_id_from=333.788&vd_source=422a2ce23eb94fdbdfc2824aa2898ea5\">课程视频</a></p>\n<p><a href=\"https://cdn.boomingtech.com/games104_static/upload/GAMES104_lecture02Layered%20Architecture%20of%20Game%20Engine.pdf\">课件PPT</a></p>\n","categories":[{"name":"游戏引擎","path":"api/categories/游戏引擎.json"}],"tags":[{"name":"游戏引擎","path":"api/tags/游戏引擎.json"},{"name":"games104","path":"api/tags/games104.json"}]}