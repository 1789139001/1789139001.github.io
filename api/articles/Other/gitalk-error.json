{"title":"Gitalk 评论踩坑","slug":"Other/gitalk-error","date":"2022-05-24T09:57:13.000Z","updated":"2023-11-29T02:42:01.746Z","comments":true,"path":"api/articles/Other/gitalk-error.json","realPath":null,"excerpt":null,"covers":["/images/article/gitalk/error.png","/images/article/gitalk/register.png","/images/article/gitalk/edit.png"],"cover":"/images/background/gitalk-error.jpg","content":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>我的博客关于页面没有开通评论，就想给文章开通评论区，点击登录功能发现，GitHub 登录总是失败。<br><img src=\"/images/article/gitalk/error.png\"><span class=\"image-caption\">登陆报错</span></p>\n<h1 id=\"初步解决\"><a href=\"#初步解决\" class=\"headerlink\" title=\"初步解决\"></a>初步解决</h1><p><a href=\"https://zhuanlan.zhihu.com/p/350735142\">参考文章</a></p>\n<p>找到对应的 GitHub 仓库，Issue 区往往能找到一些有效答案。</p>\n<p>gitalk中用到的 cors-anywhere.herokuapp.com 这个网站原本是用来演示用的，但是现在已经被滥用了。</p>\n<p>从2021.1.31开始用户必须手动先访问这个网站获取临时的访问权限，然后才能使用，作者建议开发者自己维护一个代理网站。</p>\n<p>在gitalk的issue中看到别人分享的一个在线代理，先拿来用下</p>\n<figure class=\"highlight http\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\">https://netnr-proxy.cloudno.de/https://github.com/login/oauth/access_token<br></code></pre></td></tr></tbody></table></figure>\n\n<p>我用的是zhaoo主题，在布局模板中找到代理gitalk.ejs文件，如果其他模板可以搜索gitalk关键字应该也能找到差不多的代码。</p>\n<p>在模板里加上proxy配置和在主题的_config.yml文件上也加上proxy配置:</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> gitalk = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gitalk</span>({<br>     <span class=\"hljs-attr\">clientID</span>: <span class=\"hljs-string\">'&lt;%= theme.gitalk.clientID %&gt;'</span>,<br>     <span class=\"hljs-attr\">clientSecret</span>: <span class=\"hljs-string\">'&lt;%= theme.gitalk.clientSecret %&gt;'</span>,<br>     <span class=\"hljs-attr\">id</span>: <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">pathname</span>,<br>     <span class=\"hljs-attr\">repo</span>: <span class=\"hljs-string\">'&lt;%= theme.gitalk.repo %&gt;'</span>,<br>     <span class=\"hljs-attr\">owner</span>: <span class=\"hljs-string\">'&lt;%= theme.gitalk.owner %&gt;'</span>,<br>     <span class=\"hljs-attr\">admin</span>: <span class=\"hljs-string\">'&lt;%= theme.gitalk.admin %&gt;'</span>,<br>     <span class=\"hljs-attr\">proxy</span>: <span class=\"hljs-string\">'&lt;%= theme.gitalk.proxy %&gt;'</span>,<br>   });<br></code></pre></td></tr></tbody></table></figure>\n<p>重新部署后发现依然有问题。</p>\n<p>查看了对应请求的应答码 429，表示请求太多，我个人估计是白嫖这个在线代理的人太多导致的。<br>既然白嫖的代理不能用，那我们就自己搭一个在线代理吧。</p>\n<h2 id=\"解决方法（一）\"><a href=\"#解决方法（一）\" class=\"headerlink\" title=\"解决方法（一）\"></a>解决方法（一）</h2><p><b>此方法国内被墙了</b>，还可以使用 Vercel 免费部署node.js项目解决跨域问题，你可参考该项目 (<a href=\"https://github.com/Dedicatus546/cors-server\">https://github.com/Dedicatus546/cors-server</a>) 最新推荐使用，此处就不在累述。</p>\n<p><a href=\"https://www.chenhanpeng.com/create-own-cors-anywhere-to-resolve-the-request-with-403/\">参考文章</a><br>利用CloudFlare Worker创建在线代理，不需要我们有服务器，也不需要搭建Node.js服务，只需要注册一个CloudFlare账号，创建一个Worker，部署一个JS脚本就可以了，简单方便，下面我们就来看看如何创建吧。</p>\n<p>首先你需要一个 CloudFlare 的账号，如果还没有的话就先注册一个吧：<a href=\"https://dash.cloudflare.com/\">点我注册</a></p>\n<p>选择Workers，创建一个免费的Worker。<br><img src=\"/images/article/gitalk/register.png\"><span class=\"image-caption\">创建Workers</span></p>\n<p>免费版本每天10万次请求也足以应对个人使用或者是小范围分享了。</p>\n<p>填写自己喜欢的二级域名，然后创建worker。</p>\n<p>进入github项目的 <a href=\"https://github.com/Hanpeng-Chen/cloudflare-cors-anywhere/blob/master/index.js\">index.js</a>，复制代码。</p>\n<p>清除脚本编辑器中的示例代码，将复制的代码粘贴进去。</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">这里有个点需要注意：我们可以设置请求的黑白名单，这里的白名单我只设置了自己博客<br>大家可以根据自己的情况修改，当然也可以设置为whitelist = [ \".*\" ]<br>这样的话知道你代理地址的人都可以用了，然而免费版本的每天只有10万次请求<br>如果用的人多了很容易就用完了，所以还是建议大家设置 whitelist<br></code></pre></td></tr></tbody></table></figure>\n<p><img src=\"/images/article/gitalk/edit.png\"><span class=\"image-caption\">创建Workers</span><br>修改好之后，点击 保存并部署，如果部署正常的话，我们就可以使用我们创建的在线代理了。</p>\n<p>从右侧获取到你的worker域名并记下来，在上面提到_confix.yml文件的proxy配置项修改为如下代码：</p>\n<figure class=\"highlight yaml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">proxy:</span> <span class=\"hljs-string\">https://sakura.cherrywhite.workers.dev/?https://github.com/login/oauth/access_token</span><br></code></pre></td></tr></tbody></table></figure>\n<p>一定要注意连接的地方，要加?,不然会出现no access token的错误<br>还有一个点要注意的是，如果还是有问题，index.js文件可以使用：</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">myHeaders.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"hljs-string\">\"*\"</span>);<br><span class=\"hljs-comment\">// myHeaders.set(\"Access-Control-Allow-Origin\", event.request.headers.get(\"Origin\"));</span><br></code></pre></td></tr></tbody></table></figure>\n\n<p>重新部署我们的博客，再次点击 使用Github登录，这次登录成功，没有报错。<br>至此，个人在线代理就搭建成功了，博客的评论功能也能正常使用了，撒花！！！</p>\n<h2 id=\"解决方法（二）\"><a href=\"#解决方法（二）\" class=\"headerlink\" title=\"解决方法（二）\"></a>解决方法（二）</h2><p>使用Nginx做一个请求转发服务器 ，在nginx配置文件中加入</p>\n<figure class=\"highlight nginx\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-comment\"># 插入 Gitalk Auth Use 关键点</span><br><span class=\"hljs-section\">location</span> /github {<br>    <span class=\"hljs-attribute\">if</span> (<span class=\"hljs-variable\">$request_method</span> = <span class=\"hljs-string\">'OPTIONS'</span>) {<br>        <span class=\"hljs-attribute\">return</span> <span class=\"hljs-number\">204</span>;<br>    }<br>    <span class=\"hljs-attribute\">proxy_pass</span> https://github.com/; <span class=\"hljs-comment\"># 注意尾部斜杠不能少</span><br>}<br></code></pre></td></tr></tbody></table></figure>\n\n<p>前端请求是<a href=\"https://xxx/github/login/oauth/access_token\">https://xxx/github/login/oauth/access_token</a>,<br>而实际请求是<a href=\"https://github.com/login/oauth/access_token%EF%BC%8C%E6%89%80%E4%BB%A5%E8%A7%A3%E5%86%B3%E4%BA%86%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E3%80%82\">https://github.com/login/oauth/access_token，所以解决了跨域问题。</a></p>\n<p>Gitalk配置代理，proxy: /github/login/oauth/access_token</p>\n","more":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>我的博客关于页面没有开通评论，就想给文章开通评论区，点击登录功能发现，GitHub 登录总是失败。<br><img  src=\"/images/article/gitalk/error.png\"  ><span class=\"image-caption\">登陆报错</span></p>\n<h1 id=\"初步解决\"><a href=\"#初步解决\" class=\"headerlink\" title=\"初步解决\"></a>初步解决</h1><p><a href=\"https://zhuanlan.zhihu.com/p/350735142\">参考文章</a></p>\n<p>找到对应的 GitHub 仓库，Issue 区往往能找到一些有效答案。</p>\n<p>gitalk中用到的 cors-anywhere.herokuapp.com 这个网站原本是用来演示用的，但是现在已经被滥用了。</p>\n<p>从2021.1.31开始用户必须手动先访问这个网站获取临时的访问权限，然后才能使用，作者建议开发者自己维护一个代理网站。</p>\n<p>在gitalk的issue中看到别人分享的一个在线代理，先拿来用下</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\">https://netnr-proxy.cloudno.de/https://github.com/login/oauth/access_token<br></code></pre></td></tr></table></figure>\n\n<p>我用的是zhaoo主题，在布局模板中找到代理gitalk.ejs文件，如果其他模板可以搜索gitalk关键字应该也能找到差不多的代码。</p>\n<p>在模板里加上proxy配置和在主题的_config.yml文件上也加上proxy配置:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> gitalk = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gitalk</span>(&#123;<br>     <span class=\"hljs-attr\">clientID</span>: <span class=\"hljs-string\">&#x27;&lt;%= theme.gitalk.clientID %&gt;&#x27;</span>,<br>     <span class=\"hljs-attr\">clientSecret</span>: <span class=\"hljs-string\">&#x27;&lt;%= theme.gitalk.clientSecret %&gt;&#x27;</span>,<br>     <span class=\"hljs-attr\">id</span>: <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">pathname</span>,<br>     <span class=\"hljs-attr\">repo</span>: <span class=\"hljs-string\">&#x27;&lt;%= theme.gitalk.repo %&gt;&#x27;</span>,<br>     <span class=\"hljs-attr\">owner</span>: <span class=\"hljs-string\">&#x27;&lt;%= theme.gitalk.owner %&gt;&#x27;</span>,<br>     <span class=\"hljs-attr\">admin</span>: <span class=\"hljs-string\">&#x27;&lt;%= theme.gitalk.admin %&gt;&#x27;</span>,<br>     <span class=\"hljs-attr\">proxy</span>: <span class=\"hljs-string\">&#x27;&lt;%= theme.gitalk.proxy %&gt;&#x27;</span>,<br>   &#125;);<br></code></pre></td></tr></table></figure>\n<p>重新部署后发现依然有问题。</p>\n<p>查看了对应请求的应答码 429，表示请求太多，我个人估计是白嫖这个在线代理的人太多导致的。<br>既然白嫖的代理不能用，那我们就自己搭一个在线代理吧。</p>\n<h2 id=\"解决方法（一）\"><a href=\"#解决方法（一）\" class=\"headerlink\" title=\"解决方法（一）\"></a>解决方法（一）</h2><p><b>此方法国内被墙了</b>，还可以使用 Vercel 免费部署node.js项目解决跨域问题，你可参考该项目 (<a href=\"https://github.com/Dedicatus546/cors-server\">https://github.com/Dedicatus546/cors-server</a>) 最新推荐使用，此处就不在累述。</p>\n<p><a href=\"https://www.chenhanpeng.com/create-own-cors-anywhere-to-resolve-the-request-with-403/\">参考文章</a><br>利用CloudFlare Worker创建在线代理，不需要我们有服务器，也不需要搭建Node.js服务，只需要注册一个CloudFlare账号，创建一个Worker，部署一个JS脚本就可以了，简单方便，下面我们就来看看如何创建吧。</p>\n<p>首先你需要一个 CloudFlare 的账号，如果还没有的话就先注册一个吧：<a href=\"https://dash.cloudflare.com/\">点我注册</a></p>\n<p>选择Workers，创建一个免费的Worker。<br><img  src=\"/images/article/gitalk/register.png\"  ><span class=\"image-caption\">创建Workers</span></p>\n<p>免费版本每天10万次请求也足以应对个人使用或者是小范围分享了。</p>\n<p>填写自己喜欢的二级域名，然后创建worker。</p>\n<p>进入github项目的 <a href=\"https://github.com/Hanpeng-Chen/cloudflare-cors-anywhere/blob/master/index.js\">index.js</a>，复制代码。</p>\n<p>清除脚本编辑器中的示例代码，将复制的代码粘贴进去。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">这里有个点需要注意：我们可以设置请求的黑白名单，这里的白名单我只设置了自己博客<br>大家可以根据自己的情况修改，当然也可以设置为whitelist = [ &quot;.*&quot; ]<br>这样的话知道你代理地址的人都可以用了，然而免费版本的每天只有10万次请求<br>如果用的人多了很容易就用完了，所以还是建议大家设置 whitelist<br></code></pre></td></tr></table></figure>\n<p><img  src=\"/images/article/gitalk/edit.png\"  ><span class=\"image-caption\">创建Workers</span><br>修改好之后，点击 保存并部署，如果部署正常的话，我们就可以使用我们创建的在线代理了。</p>\n<p>从右侧获取到你的worker域名并记下来，在上面提到_confix.yml文件的proxy配置项修改为如下代码：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">proxy:</span> <span class=\"hljs-string\">https://sakura.cherrywhite.workers.dev/?https://github.com/login/oauth/access_token</span><br></code></pre></td></tr></table></figure>\n<p>一定要注意连接的地方，要加?,不然会出现no access token的错误<br>还有一个点要注意的是，如果还是有问题，index.js文件可以使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">myHeaders.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"hljs-string\">&quot;*&quot;</span>);<br><span class=\"hljs-comment\">// myHeaders.set(&quot;Access-Control-Allow-Origin&quot;, event.request.headers.get(&quot;Origin&quot;));</span><br></code></pre></td></tr></table></figure>\n\n<p>重新部署我们的博客，再次点击 使用Github登录，这次登录成功，没有报错。<br>至此，个人在线代理就搭建成功了，博客的评论功能也能正常使用了，撒花！！！</p>\n<h2 id=\"解决方法（二）\"><a href=\"#解决方法（二）\" class=\"headerlink\" title=\"解决方法（二）\"></a>解决方法（二）</h2><p>使用Nginx做一个请求转发服务器 ，在nginx配置文件中加入</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-comment\"># 插入 Gitalk Auth Use 关键点</span><br><span class=\"hljs-section\">location</span> /github &#123;<br>    <span class=\"hljs-attribute\">if</span> (<span class=\"hljs-variable\">$request_method</span> = <span class=\"hljs-string\">&#x27;OPTIONS&#x27;</span>) &#123;<br>        <span class=\"hljs-attribute\">return</span> <span class=\"hljs-number\">204</span>;<br>    &#125;<br>    <span class=\"hljs-attribute\">proxy_pass</span> https://github.com/; <span class=\"hljs-comment\"># 注意尾部斜杠不能少</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>前端请求是<a href=\"https://xxx/github/login/oauth/access_token\">https://xxx/github/login/oauth/access_token</a>,<br>而实际请求是<a href=\"https://github.com/login/oauth/access_token%EF%BC%8C%E6%89%80%E4%BB%A5%E8%A7%A3%E5%86%B3%E4%BA%86%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E3%80%82\">https://github.com/login/oauth/access_token，所以解决了跨域问题。</a></p>\n<p>Gitalk配置代理，proxy: &#x2F;github&#x2F;login&#x2F;oauth&#x2F;access_token</p>\n","categories":[{"name":"博客","path":"api/categories/博客.json"},{"name":"踩坑","path":"api/categories/踩坑.json"}],"tags":[{"name":"gitalk","path":"api/tags/gitalk.json"},{"name":"踩坑","path":"api/tags/踩坑.json"},{"name":"报错","path":"api/tags/报错.json"}]}